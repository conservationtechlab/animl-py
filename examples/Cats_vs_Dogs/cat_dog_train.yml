# TODO: file paths are relative to the root of the animl-py repository, must fix


seed: 28  # random number generator seed (long integer value)
device: cuda:0  # set to local gpu device 
num_workers: 8  # number of cores

#comet ml
api_key: "your_api_key"
project_name: "project"
workspace: "your_workspace"

# dataset parameters
num_classes: 2
training_set: "/examples/Cats_vs_Dogs/train_data.csv"
validate_set: "/examples/Cats_vs_Dogs/validate_data.csv"
test_set: "/examples/Cats_vs_Dogs/test_data.csv"
class_file: "/examples/Cats_vs_Dogs/cat_dog_labels.csv" 

# CSV Column Selection
file_col: 'FilePath'
label_col: 'Class'
class_list_index: 'id'
class_list_label: 'class'

# training hyperparameters
architecture: "efficientnet_v2_m" # or choose "convnext_base"
image_size: [480, 480]
crop: False # train on cropped images or not
batch_size: 12
val_batch_size: 48
num_epochs: 10
frozen_epochs: 2
augment: True # use data augmentation for training or not
checkpoint_frequency: 1
patience: 5 # number of epochs with no improvement after which training will be stopped
optimizer: AdamW  # AdamW or SGD
learning_rate: 0.001
weight_decay: 0.0001
momentum: 0.9 # only for SGD
scheduler: True # CosineAnnealingLR
t_max: 10 # number of epochs for the scheduler, usualy the same as num_epochs
mixed_precision: True # True or False, if you have a GPU with Tensor Cores (NVIDIA Volta, Turing, or Ampere architecture), set to True

# overwrite .pt files
overwrite: False
experiment_folder: '/examples/Cats_vs_Dogs/Output/'
log_file: '/examples/Cats_vs_Dogs/training_log.txt'
#cache_folder: '/examples/Cats_vs_Dogs/Cache' #folder to cache cropped images, preferably local SSD

# path to save the best model
active_model: '/examples/Cats_vs_Dogs/Output/best.pt'